<!--

 @(#)build.xml	

 Copyright (c) 2008 Sebastian Ordyniak

-->

<!-- ===================== Project Properties =========================== -->

<project name="gralog-examples" default="all" basedir=".">

	<!-- the relative path to your gralog-core, i.e. relative to the gralog-example directory -->
	<property name="gralog-core.relpath" value="../gralog-core"/>
	
	<property name="project.name" value="Gralog-Examples"/>
	<property name="project.abbr" value="gralog-examples"/>
	<property name="package.root" value="de.hu"/>
	
<!-- ===================== Project Environment =========================== -->

	<property name="source"    value="${basedir}/src"/>
	<property name="lib" value="${basedir}/lib"/>
	<property name="core.jar" value="gralog-core.jar"/>
	<property name="manifest" value="${basedir}/META-INF/MANIFEST.MF"/>
	<property name="doc" value="${basedir}/doc"/>	

<!--  ==================== Compilation Options ==================== -->

	<property name="compile.debug"       value="false"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>

<!-- ===================== Build Environment =========================== -->

	<property name="classes" value="${basedir}/bin"/>
	<property name="dist" value="${basedir}/dist"/>
	<property name="dist.tmp" value="${dist}/tmp"/>
	<property name="project.jar" value="${project.abbr}.jar"/>
	<property name="project.zip" value="${project.abbr}.zip"/>
	<property name="apidoc" value="${basedir}/doc/api"/>

<!--  ==================== All ==================== -->

	<target name="all" depends="dist"
		description="Clean up and produce all distributions"/>

<!--  ==================== Clean ==================== -->

	<target name="clean" description="Delete all generated files and directories">
    	<delete dir="${classes}/"/>
        <delete file="${dist}/${project.jar}"/>
        <delete file="${dist}/${project.zip}"/>
		<delete dir="${apidoc}"/>
	</target>

<!--  ==================== Init ==================== -->

	<target name="init" description="Initialize the build Java ${java.specification.version} Build">
		<tstamp/>
		<mkdir dir="${classes}"/>
		<mkdir dir="${apidoc}"/>
		<mkdir dir="${dist}"/>
	</target>

<!--  ==================== Compile ==================== -->

	<target name="compile" depends="init" description="Compile the build tree">

		<!-- Compile sources -->
		<javac srcdir="${source}"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}"
			destdir="${classes}">
			<classpath>
				<pathelement path="${classes}"/>
				<fileset dir="${lib}">
			        <include name="**/*.jar"/>
   	 	        </fileset>
			</classpath>
		</javac>
		
		<copy todir="${classes}">
			<fileset dir="${source}">
				<include name="plugin.config"/>
			</fileset>
		</copy>
				
	</target>

<!--  ==================== Apidoc ==================== -->

	<target name="apidoc" depends="init" description="Generate the api specification (javadoc)">
        <javadoc 
	    		sourcepath="${source}" 
	    		destdir="${apidoc}" 
        		overview="${source}/overview.html" 
    			packagenames="${package.root}.*" 
        		doctitle="${project.name}-Api-Specification" 
	    		source="1.5" 
        		nodeprecated="false" 
        		nodeprecatedlist="false" 
        		noindex="false" 
        		nonavbar="false" 
        		notree="false" 
        		splitindex="true" 
	    		author="true" 
        		use="true" 
        		version="true">
        	
			<classpath>
				<pathelement path="${classes}"/>
				<fileset dir="${lib}">
			        <include name="**/*.jar"/>
   	 	        </fileset>
			</classpath>

        	<link href="../../${gralog-core.relpath}/doc/JGraphT/api"/>
        	<link href="../../${gralog-core.relpath}/doc/JGraph/api"/>
        	<link href="../../${gralog-core.relpath}/doc/api"/>
            <link href="http://java.sun.com/javase/6/docs/api/"/>
        </javadoc>
	</target>

<!--  ==================== Doc ==================== -->

	<target name="doc" depends="apidoc" description="Generate all documentation"/>

<!--  ==================== Jar ==================== -->

	<target name="jar" depends="compile" description="Build all Java archives (JARs)">
		<delete dir="${dist}/tmp_fat_jar"/>

		<mkdir dir="${dist}/tmp_fat_jar"/>
		
		<unjar dest="${dist}/tmp_fat_jar">
		    <fileset dir="${lib}">
<!-- please add your external libraries here. An example, on how to do this is given below. 
	Note: You also have to uncoment the line <exclude name="**/*.jar"/> below -->
<!--		        <include name="YOUR_EXTERNAL_LIBRARY.jar"/> -->
		    	<exclude name="**/*.jar"/>
		    </fileset>
		</unjar>
		
		<copy todir="${dist}/tmp_fat_jar">
			<fileset dir="${classes}">
				<include name="**/*"/>
			</fileset>
		</copy>

		<jar jarfile="${dist}/${project.jar}" basedir="${dist}/tmp_fat_jar" manifest="${manifest}"/>
		
		<delete dir="${dist}/tmp_fat_jar"/>
	</target>
	
	<target name="dist" depends="jar, doc" description="Build Dist">
		<property name="dist.whole" value="${dist.tmp}/${project.abbr}"/>
		
		<delete dir="${dist.tmp}"/>
		<mkdir dir="${dist.whole}"/>
		
		<copy toDir="${dist.whole}">
		    <fileset dir="${basedir}">
		    	<include name="src/"/>
		    	<include name="doc/"/>
		    	<include name="lib/"/>
		    	<include name="META-INF/"/>
		    	<include name="build.xml"/>
		    	<include name="COPYING"/>
		    	<include name="README"/>
		    </fileset>
		</copy>
		<mkdir dir="${dist.whole}/dist"/>
		<copy file="${dist}/${project.jar}" toDir="${dist.whole}/dist/"/>
		
		<zip basedir="${dist.tmp}" zipfile="${dist}/${project.zip}"/>
		
		<delete dir="${dist.tmp}"/>
	</target>
</project>

