
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 22 15:26:14 BST 2008
//----------------------------------------------------

package de.hu.logic.parser;

import java_cup.runtime.*;
import de.hu.logic.fo.Formula;
import java.util.ArrayList;
import de.hu.gralog.app.UserException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 22 15:26:14 BST 2008
  */
public class FOParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FOParser() {super();}

  /** Constructor which sets the default scanner. */
  public FOParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FOParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\005\000\002\002\004\000\002\004" +
    "\010\000\002\005\006\000\002\003\004\000\002\003\003" +
    "\000\002\006\005\000\002\007\005\000\002\007\010\000" +
    "\002\010\006\000\002\011\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\017" +
    "\000\002\011\017\000\002\015\006\000\002\016\005\000" +
    "\002\016\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\014\005\000\002\014\003\000\002\013" +
    "\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\006\004\001\002\000\004\015\131\001" +
    "\002\000\004\006\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\016\020\001\002\000" +
    "\022\010\030\027\032\030\033\033\040\034\031\037\036" +
    "\040\034\041\035\001\002\000\004\006\ufffc\001\002\000" +
    "\004\006\015\001\002\000\004\002\001\001\002\000\006" +
    "\013\017\016\020\001\002\000\004\006\ufffd\001\002\000" +
    "\004\015\026\001\002\000\006\007\021\020\022\001\002" +
    "\000\022\010\ufffa\027\ufffa\030\ufffa\033\ufffa\034\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\001\002\000\004\012\023\001\002" +
    "\000\004\041\024\001\002\000\004\007\025\001\002\000" +
    "\022\010\ufff9\027\ufff9\030\ufff9\033\ufff9\034\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\001\002\000\004\007\027\001\002\000" +
    "\004\002\ufffe\001\002\000\006\023\101\025\102\001\002" +
    "\000\022\010\030\027\032\030\033\033\040\034\031\037" +
    "\036\040\034\041\035\001\002\000\014\006\ufff5\011\ufff5" +
    "\031\ufff5\032\ufff5\035\ufff5\001\002\000\014\006\ufff4\011" +
    "\ufff4\031\ufff4\032\ufff4\035\ufff4\001\002\000\004\041\062" +
    "\001\002\000\006\012\053\034\052\001\002\000\004\041" +
    "\050\001\002\000\004\006\043\001\002\000\022\010\030" +
    "\027\032\030\033\033\040\034\031\037\036\040\034\041" +
    "\035\001\002\000\014\006\ufff6\011\ufff6\031\ufff6\032\ufff6" +
    "\035\ufff6\001\002\000\014\006\ufff2\011\ufff2\031\ufff2\032" +
    "\ufff2\035\ufff2\001\002\000\004\013\045\001\002\000\004" +
    "\006\ufffb\001\002\000\004\016\046\001\002\000\004\007" +
    "\047\001\002\000\004\006\ufff8\001\002\000\022\010\030" +
    "\027\032\030\033\033\040\034\031\037\036\040\034\041" +
    "\035\001\002\000\014\006\ufff1\011\ufff1\031\ufff1\032\ufff1" +
    "\035\ufff1\001\002\000\004\041\055\001\002\000\004\041" +
    "\054\001\002\000\014\006\ufff7\011\ufff7\031\ufff7\032\ufff7" +
    "\035\ufff7\001\002\000\010\005\uffeb\022\uffeb\035\uffeb\001" +
    "\002\000\006\005\057\035\060\001\002\000\004\041\061" +
    "\001\002\000\014\006\uffed\011\uffed\031\uffed\032\uffed\035" +
    "\uffed\001\002\000\010\005\uffec\022\uffec\035\uffec\001\002" +
    "\000\022\010\030\027\032\030\033\033\040\034\031\037" +
    "\036\040\034\041\035\001\002\000\014\006\ufff0\011\ufff0" +
    "\031\ufff0\032\ufff0\035\ufff0\001\002\000\004\035\100\001" +
    "\002\000\010\031\066\032\067\035\uffea\001\002\000\022" +
    "\010\030\027\032\030\033\033\040\034\031\037\036\040" +
    "\034\041\035\001\002\000\022\010\030\027\032\030\033" +
    "\033\040\034\031\037\036\040\034\041\035\001\002\000" +
    "\006\032\072\035\uffe4\001\002\000\004\035\uffe8\001\002" +
    "\000\022\010\030\027\032\030\033\033\040\034\031\037" +
    "\036\040\034\041\035\001\002\000\004\035\uffe5\001\002" +
    "\000\006\031\076\035\uffe6\001\002\000\004\035\uffe9\001" +
    "\002\000\022\010\030\027\032\030\033\033\040\034\031" +
    "\037\036\040\034\041\035\001\002\000\004\035\uffe7\001" +
    "\002\000\014\006\ufff3\011\ufff3\031\ufff3\032\ufff3\035\ufff3" +
    "\001\002\000\004\004\116\001\002\000\004\004\103\001" +
    "\002\000\004\021\104\001\002\000\004\041\105\001\002" +
    "\000\004\005\106\001\002\000\004\041\055\001\002\000" +
    "\006\005\057\022\110\001\002\000\022\010\030\027\032" +
    "\030\033\033\040\034\031\037\036\040\034\041\035\001" +
    "\002\000\004\011\112\001\002\000\004\034\113\001\002" +
    "\000\004\041\055\001\002\000\006\005\057\035\115\001" +
    "\002\000\014\006\uffee\011\uffee\031\uffee\032\uffee\035\uffee" +
    "\001\002\000\004\021\117\001\002\000\004\041\120\001" +
    "\002\000\004\005\121\001\002\000\004\041\055\001\002" +
    "\000\006\005\057\022\123\001\002\000\022\010\030\027" +
    "\032\030\033\033\040\034\031\037\036\040\034\041\035" +
    "\001\002\000\004\011\125\001\002\000\004\034\126\001" +
    "\002\000\004\041\055\001\002\000\006\005\057\035\130" +
    "\001\002\000\014\006\uffef\011\uffef\031\uffef\032\uffef\035" +
    "\uffef\001\002\000\004\017\132\001\002\000\004\012\133" +
    "\001\002\000\004\041\134\001\002\000\004\007\135\001" +
    "\002\000\004\006\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\002\005\004\004\001\001\000\002\001" +
    "\001\000\010\003\012\006\011\007\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\036\015\040\001\001\000\002\001\001\000\010\005\013" +
    "\006\015\007\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\064\012\063\015" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\043\001\001\000\006\011\041\015\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\050\015\040\001\001\000\002\001\001\000" +
    "\004\016\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\062\015\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\073\014\074\015\040\001\001\000\010" +
    "\011\067\013\070\015\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\067\013\072\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\073\014\076\015\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\106\001\001\000\002\001\001\000\006\011\110\015" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\121\001\001\000\002\001\001\000\006\011\123\015" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FOParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FOParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FOParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	FOFormulaList flist = new FOFormulaList();	
	
	String errorMsg = null;

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new ComplexSymbolFactory();
		FOFormulaList list;
		if (args.length==0) 
		{
		    list = (FOFormulaList) (new FOParser(new FOScanner(System.in,sf),sf)).parse().value;
     		list.printList();
		}
		else 
		{
		FOParser parse = new FOParser(new FOScanner(new java.io.FileInputStream(args[0]),sf),sf);
		list = (FOFormulaList) parse.parse().value;
/*		FOParser parse = new FOParser(new FOScanner(new java.io.FileInputStream(args[0]),sf),sf);
		list = (FOFormulaList) (parse.parse().value);
		if(parse.hasError())
		   System.out.println(parse.getErrorMsg());
		else
		   list.printList();*/
//		list = (FOFormulaList) (new FOParser(new FOScanner(new java.io.FileInputStream(args[0]),sf),sf)).parse().value;
     		list.printList();
		}
	}
	
	public Boolean hasError()
	{
	  return errorMsg == null;
	}
	
	public String getErrorMsg()
	{
	   if(errorMsg == null)
	      return "no error";
	   else
	      return errorMsg;
	}
	
	 public void syntax_error(Symbol cur_token)
	 {
	   if(errorMsg == null)
	       errorMsg = "Syntax Error: " + cur_token.toString();
	 }

	 public void report_fatal_error(String message, Object info) throws Exception
	 {
	   throw new Exception("Fatal parsing error: " + message + "\n" + info.toString());
	 }

	 
/*	 public void report_fatal_error(String message, Object info)
	 {
	   if(errorMsg == null)
            errorMsg = "Fatal Error: " + cur_token.toString();
	 }
	 
	 
	 public void report_error(String message, Object info)
	 {
	   if(errorMsg == null)
           errorMsg = "Error: " + message + "\nInfo: " + info.toString();
	 }
	 
	 public void unrecovered_syntax_error(Symbol cur_token)
	 {
	   if(errorMsg == null)
  	   	   errorMsg = "Unrecovered Error at symbol: " + cur_token.toString();
	 }
	 
	 */
	 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FOParser$actions {
  private final FOParser parser;

  /** Constructor */
  CUP$FOParser$actions(FOParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FOParser$do_action(
    int                        CUP$FOParser$act_num,
    java_cup.runtime.lr_parser CUP$FOParser$parser,
    java.util.Stack            CUP$FOParser$stack,
    int                        CUP$FOParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FOParser$result;

      /* select the action based on the action number */
      switch (CUP$FOParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // veelist ::= formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("veelist",9, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // veelist ::= formula VEE veelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.or, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("veelist",9, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // wedgelist ::= formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("wedgelist",10, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // wedgelist ::= formula WEDGE wedgelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.and, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("wedgelist",10, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // booleanlist ::= formula VEE veelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.or, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("booleanlist",8, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleanlist ::= formula WEDGE wedgelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.and, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("booleanlist",8, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // booleanlist ::= formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("booleanlist",8, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varlist ::= STRING 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(1); RESULT.add(s); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("varlist",12, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varlist ::= varlist COMMA STRING 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 l.add(s); RESULT = l; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("varlist",12, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= STRING LBRACE varlist RBRACE 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = new Formula(Formula.proposition, s, l);  
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formula ::= LP IFP US LCB STRING COMMA varlist RCB formula RP LBRACE varlist RBRACE 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-6)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-4)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-4)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		ArrayList<String> l2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = new Formula(Formula.ifp, s, l, l2, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-12)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formula ::= LP LFP US LCB STRING COMMA varlist RCB formula RP LBRACE varlist RBRACE 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-6)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-4)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-4)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		ArrayList<String> l2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = new Formula(Formula.lfp, s, l, l2, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-12)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formula ::= FORALL STRING formula 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.forall, s, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formula ::= EXISTS STRING formula 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.exists, s, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formula ::= NEG formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.neg, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formula ::= LBRACE booleanlist RBRACE 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formula ::= TOP 
            {
              Formula RESULT =null;
		 RESULT = new Formula(Formula.top, ""); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formula ::= BOT 
            {
              Formula RESULT =null;
		 RESULT = new Formula(Formula.bottom, ""); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formula ::= proposition 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formula ::= STRING EQ STRING 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.eq, s, s2); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formulatagclose ::= LT SLASH FORMULA GT 
            {
              Object RESULT =null;

              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatagclose",6, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formulatagopen ::= LT FORMULA NAME EQ STRING GT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = s; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatagopen",5, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-5)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formulatagopen ::= LT FORMULA GT 
            {
              String RESULT =null;
		 RESULT = "main"; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatagopen",5, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formulatag ::= formulatagopen formula formulatagclose 
            {
              FOFormulaList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 FOFormulaList fl = new FOFormulaList(); fl.addFormula(s,f); RESULT = fl; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatag",4, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formula_list ::= formulatag 
            {
              FOFormulaList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		FOFormulaList fl = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = fl; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula_list",1, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula_list ::= formula_list formulatag 
            {
              FOFormulaList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		FOFormulaList fl = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		FOFormulaList f = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 fl.addAll(f); RESULT = fl; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula_list",1, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // logictagclose ::= LT SLASH LOGIC GT 
            {
              Object RESULT =null;

              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("logictagclose",3, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // logictagopen ::= LT LOGIC TYPE EQ STRING GT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = s; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("logictagopen",2, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-5)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		FOFormulaList start_val = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		RESULT = start_val;
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FOParser$parser.done_parsing();
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= logictagopen formula_list logictagclose 
            {
              FOFormulaList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		FOFormulaList fl = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 fl.setType(s); System.out.println("file"); RESULT = fl;  
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

