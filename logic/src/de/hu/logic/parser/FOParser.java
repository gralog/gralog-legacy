
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 22 11:22:47 BST 2008
//----------------------------------------------------

package de.hu.logic.parser;

import java_cup.runtime.*;
import de.hu.logic.fo.Formula;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 22 11:22:47 BST 2008
  */
public class FOParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FOParser() {super();}

  /** Constructor which sets the default scanner. */
  public FOParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FOParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\005\000\002\002\004\000\002\004" +
    "\010\000\002\005\006\000\002\003\004\000\002\003\003" +
    "\000\002\006\005\000\002\007\005\000\002\007\010\000" +
    "\002\010\006\000\002\011\005\000\002\011\004\000\002" +
    "\011\003\000\002\011\006\000\002\011\005\000\002\011" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\015\006\000\002\016\005\000\002\016\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\014\005\000\002\014\003\000\002\013\005\000\002\013" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\005\004\001\002\000\004\014\104\001" +
    "\002\000\004\005\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\015\020\001\002\000" +
    "\022\005\uffef\026\031\031\037\032\030\034\035\035\034" +
    "\036\032\037\033\001\002\000\004\005\ufffc\001\002\000" +
    "\004\005\015\001\002\000\004\002\001\001\002\000\006" +
    "\012\017\015\020\001\002\000\004\005\ufffd\001\002\000" +
    "\004\014\026\001\002\000\006\006\021\017\022\001\002" +
    "\000\022\005\ufffa\026\ufffa\031\ufffa\032\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\001\002\000\004\011\023\001\002" +
    "\000\004\037\024\001\002\000\004\006\025\001\002\000" +
    "\022\005\ufff9\026\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\001\002\000\004\006\027\001\002\000" +
    "\004\002\ufffe\001\002\000\026\026\031\027\uffef\030\uffef" +
    "\031\037\032\030\033\uffef\034\035\035\034\036\032\037" +
    "\033\001\002\000\012\005\ufff5\027\ufff5\030\ufff5\033\ufff5" +
    "\001\002\000\004\037\065\001\002\000\006\011\056\032" +
    "\055\001\002\000\004\037\053\001\002\000\004\032\050" +
    "\001\002\000\004\005\043\001\002\000\030\005\uffef\026" +
    "\031\027\uffef\030\uffef\031\037\032\030\033\uffef\034\035" +
    "\035\034\036\032\037\033\001\002\000\004\025\041\001" +
    "\002\000\012\005\ufff6\027\ufff6\030\ufff6\033\ufff6\001\002" +
    "\000\012\005\ufff2\027\ufff2\030\ufff2\033\ufff2\001\002\000" +
    "\004\012\045\001\002\000\004\005\ufffb\001\002\000\004" +
    "\015\046\001\002\000\004\006\047\001\002\000\004\005" +
    "\ufff8\001\002\000\004\037\051\001\002\000\004\033\052" +
    "\001\002\000\012\005\ufff4\027\ufff4\030\ufff4\033\ufff4\001" +
    "\002\000\030\005\uffef\026\031\027\uffef\030\uffef\031\037" +
    "\032\030\033\uffef\034\035\035\034\036\032\037\033\001" +
    "\002\000\012\005\ufff1\027\ufff1\030\ufff1\033\ufff1\001\002" +
    "\000\004\037\060\001\002\000\004\037\057\001\002\000" +
    "\012\005\ufff7\027\ufff7\030\ufff7\033\ufff7\001\002\000\006" +
    "\004\uffec\033\uffec\001\002\000\006\004\062\033\063\001" +
    "\002\000\004\037\064\001\002\000\004\025\uffee\001\002" +
    "\000\006\004\uffed\033\uffed\001\002\000\030\005\uffef\026" +
    "\031\027\uffef\030\uffef\031\037\032\030\033\uffef\034\035" +
    "\035\034\036\032\037\033\001\002\000\012\005\ufff0\027" +
    "\ufff0\030\ufff0\033\ufff0\001\002\000\004\033\103\001\002" +
    "\000\010\027\071\030\072\033\uffeb\001\002\000\024\026" +
    "\031\027\uffef\031\037\032\030\033\uffef\034\035\035\034" +
    "\036\032\037\033\001\002\000\024\026\031\030\uffef\031" +
    "\037\032\030\033\uffef\034\035\035\034\036\032\037\033" +
    "\001\002\000\006\030\075\033\uffe5\001\002\000\004\033" +
    "\uffe9\001\002\000\024\026\031\030\uffef\031\037\032\030" +
    "\033\uffef\034\035\035\034\036\032\037\033\001\002\000" +
    "\004\033\uffe6\001\002\000\006\027\101\033\uffe7\001\002" +
    "\000\004\033\uffea\001\002\000\024\026\031\027\uffef\031" +
    "\037\032\030\033\uffef\034\035\035\034\036\032\037\033" +
    "\001\002\000\004\033\uffe8\001\002\000\012\005\ufff3\027" +
    "\ufff3\030\ufff3\033\ufff3\001\002\000\004\016\105\001\002" +
    "\000\004\011\106\001\002\000\004\037\107\001\002\000" +
    "\004\006\110\001\002\000\004\005\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\002\005\004\004\001\001\000\002\001" +
    "\001\000\010\003\012\006\011\007\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\035\015\037\001\001\000\002\001\001\000\010\005\013" +
    "\006\015\007\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\067\012\066\015\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\043\001\001\000" +
    "\006\011\041\015\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\053\015\037\001\001\000\002\001\001\000\004" +
    "\016\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\065\015\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\076\014\077\015\037\001\001\000\010\011" +
    "\072\013\073\015\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\072\013\075\015\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\076\014\101\015\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FOParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FOParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FOParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	FOFormulaList flist = new FOFormulaList();	

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		FOFormulaList list;
		if (args.length==0) 
		    list = (FOFormulaList) (new FOParser(new FOScanner(System.in,sf),sf)).parse().value;
		else 
		{
		System.out.println("Reading file " + args[0]);
		list = (FOFormulaList) (new FOParser(new FOScanner(new java.io.FileInputStream(args[0]),sf),sf)).parse().value;
		}
		list.printList();
	}
	
	 public void report_error(String message, Object info)
	 {
	   System.out.println("SK: Error: " + message + "\nInfo: " + info.toString());
	 }
	 
	 public void syntax_error(Symbol cur_token)
	 {
	   System.out.println("SK: Syntax Error at symbol: " + cur_token.toString());
	 }
	 
	 public void report_fatal_error(String message, Object info)
	 {
	   System.out.println("SK: Fatal Error at symbol: " + cur_token.toString());
	 }
	 
	 
	 public void unrecovered_syntax_error(Symbol cur_token)
	 {
	   System.out.println("SK: Unrecovered Error at symbol: " + cur_token.toString());
	 }
	 
	 
	 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FOParser$actions {
  private final FOParser parser;

  /** Constructor */
  CUP$FOParser$actions(FOParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FOParser$do_action(
    int                        CUP$FOParser$act_num,
    java_cup.runtime.lr_parser CUP$FOParser$parser,
    java.util.Stack            CUP$FOParser$stack,
    int                        CUP$FOParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FOParser$result;

      /* select the action based on the action number */
      switch (CUP$FOParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // veelist ::= formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("veelist",9, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // veelist ::= formula VEE veelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.or, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("veelist",9, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // wedgelist ::= formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("wedgelist",10, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // wedgelist ::= formula WEDGE wedgelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.and, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("wedgelist",10, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleanlist ::= formula VEE veelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.or, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("booleanlist",8, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // booleanlist ::= formula WEDGE wedgelist 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.and, left, right); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("booleanlist",8, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // booleanlist ::= formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("booleanlist",8, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varlist ::= STRING 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(1); RESULT.add(s); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("varlist",12, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varlist ::= varlist COMMA STRING 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 l.add(s); RESULT = l; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("varlist",12, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= STRING LBRACE varlist RBRACE 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = new Formula(Formula.proposition, s, l);  
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formula ::= 
            {
              Formula RESULT =null;

              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formula ::= FORALL STRING formula 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.forall, s, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formula ::= EXISTS STRING formula 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.exists, s, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formula ::= NEG formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.neg, f); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formula ::= LBRACE booleanlist RBRACE 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = f; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formula ::= SUB LBRACE STRING RBRACE 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = new Formula(Formula.sub, s); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formula ::= TOP 
            {
              Formula RESULT =null;
		 RESULT = new Formula(Formula.top, ""); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formula ::= proposition BOT 
            {
              Formula RESULT =null;
		 RESULT = new Formula(Formula.bottom, ""); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formula ::= STRING EQ STRING 
            {
              Formula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = new Formula(Formula.eq, s, s2); 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula",7, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formulatagclose ::= LT SLASH FORMULA GT 
            {
              Object RESULT =null;

              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatagclose",6, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formulatagopen ::= LT FORMULA NAME EQ STRING GT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = s; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatagopen",5, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-5)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formulatagopen ::= LT FORMULA GT 
            {
              String RESULT =null;
		 RESULT = "main"; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatagopen",5, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formulatag ::= formulatagopen formula formulatagclose 
            {
              FOFormulaList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 FOFormulaList fl = new FOFormulaList(); fl.addFormula(s,f); RESULT = fl; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formulatag",4, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formula_list ::= formulatag 
            {
              FOFormulaList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		FOFormulaList fl = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 RESULT = fl; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula_list",1, ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula_list ::= formula_list formulatag 
            {
              FOFormulaList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		FOFormulaList fl = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()).right;
		FOFormulaList f = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.peek()).value;
		 fl.addAll(f); RESULT = fl; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("formula_list",1, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // logictagclose ::= LT SLASH LOGIC GT 
            {
              Object RESULT =null;

              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("logictagclose",3, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-3)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // logictagopen ::= LT LOGIC TYPE EQ STRING GT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 RESULT = s; 
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("logictagopen",2, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-5)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		FOFormulaList start_val = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		RESULT = start_val;
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FOParser$parser.done_parsing();
          return CUP$FOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= logictagopen formula_list logictagclose 
            {
              FOFormulaList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).right;
		FOFormulaList fl = (FOFormulaList)((java_cup.runtime.Symbol) CUP$FOParser$stack.elementAt(CUP$FOParser$top-1)).value;
		 fl.setType(s); System.out.println("file"); RESULT = fl;  
              CUP$FOParser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$FOParser$stack.elementAt(CUP$FOParser$top-2)), ((java_cup.runtime.Symbol)CUP$FOParser$stack.peek()), RESULT);
            }
          return CUP$FOParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

