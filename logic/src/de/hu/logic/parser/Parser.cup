package de.hu.logic.parser;

import java_cup.runtime.*;
import de.hu.logic.modal.Formula;

parser code {:

	FormulaList flist = new FormulaList();	

	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}
:}

terminal LT,GT, LP, RP, EQ, SLASH, DOT, LOGIC, FORMULA, TYPE, NAME;			// "<", ">","[", "]", "=", "/", "." and keywords "logic", "formula", "type", "name".
terminal MU, NU, BOT, TOP, WEDGE,VEE,NEG, LBRACE, RBRACE, SUB;						// \mu, \nu \bot, \top, \wedge, \vee, \neg, (, ), \sub
terminal String STRING;


non terminal FormulaList file, formula_list;
non terminal String logictagopen;
non terminal logictagclose;
non terminal FormulaList formulatag;
non terminal String formulatagopen;
non terminal formulatagclose;
non terminal Formula formula, booleanlist, veelist, wedgelist;

//non terminal Integer expr;

//precedence left PLUS;
//precedence left TIMES;


file ::=  logictagopen:s formula_list:fl logictagclose
			{: fl.setType(s); RESULT = fl;  :}
			;	

logictagopen ::= LT LOGIC TYPE EQ STRING:s GT
				{: RESULT = s; :}
				;
logictagclose ::= LT SLASH LOGIC GT;

formula_list ::= formula_list:fl formulatag:f
					{: fl.addAll(f); RESULT = fl; :}
				| 
					formulatag:fl
					{: RESULT = fl; :}
				;

formulatag ::= formulatagopen:s formula:f formulatagclose
					{: FormulaList fl = new FormulaList(); fl.addFormula(s,f); RESULT = fl; :}
				;

formulatagopen ::=    LT FORMULA GT
						{: RESULT = "main"; :}
                   | 
                      LT FORMULA NAME EQ STRING:s GT
                      {: RESULT = s; :}
                   ;
                      
formulatagclose ::=  LT SLASH FORMULA GT;

                      
formula ::= 
			  STRING:s			// a proposition
			  {: RESULT = new Formula(Formula.proposition, s); :}
			|
			  BOT
			  {: RESULT = new Formula(Formula.bottom, ""); :} 
			| 
			  TOP
			  {: RESULT = new Formula(Formula.top, ""); :} 
			|
			  SUB LBRACE STRING:s RBRACE			// a substitution
			  {: RESULT = new Formula(Formula.sub, s); :}
			|
			  LBRACE booleanlist:f RBRACE
			  {: RESULT = f; :}
			|
			  NEG formula:f
			  {: RESULT = new Formula(Formula.neg, f); :}
			|
			  LT GT formula:f
			  {: RESULT = new Formula(Formula.diamond, "", f); :}
			|
			  LP RP formula:f
			  {: RESULT = new Formula(Formula.box, "", f); :}
			|
			  LT STRING:s GT formula:f
			  {: RESULT = new Formula(Formula.diamond, s, f); :}
			|
			  LP STRING:s RP formula:f
			  {: RESULT = new Formula(Formula.box, s, f); :}
			|
			  MU STRING:s DOT formula:f
			  {: RESULT = new Formula(Formula.mu, s,f); :}
			|
			  NU STRING:s DOT formula:f
			  {: RESULT = new Formula(Formula.mu, s,f); :}
			;
			
booleanlist ::=   formula:f
				  {: RESULT = f; :}
		        |
  		          formula:left WEDGE wedgelist:right
  		          {: RESULT = new Formula(Formula.and, left, right); :}
                |
                  formula:left VEE veelist:right
  		          {: RESULT = new Formula(Formula.or, left, right); :}
  		        ;
                
wedgelist ::= formula:left WEDGE wedgelist:right
    		    {: RESULT = new Formula(Formula.and, left, right); :}
              |
              formula:f
                {: RESULT = f; :}
              ;


veelist ::=   formula:left VEE veelist:right
    		    {: RESULT = new Formula(Formula.or, left, right); :}
              |
              formula:f
                {: RESULT = f; :}
              ;

